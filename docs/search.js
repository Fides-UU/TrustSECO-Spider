window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "app", "modulename": "app", "type": "module", "doc": "<p>File containing the setup for the Flask application.</p>\n\n<p>Running this file will start the Flask application on the localhost at port 5000.</p>\n"}, {"fullname": "app.get_data", "modulename": "app", "qualname": "get_data", "type": "function", "doc": "<p>Uses the given JSON to get the wanted data-points.</p>\n\n<p>Returns:\n    responses.Response: HTTP response containing the requested data as JSON</p>\n", "signature": "() -> responses.Response", "funcdef": "def"}, {"fullname": "app.set_tokens", "modulename": "app", "qualname": "set_tokens", "type": "function", "doc": "<p>Uses the given JSON to set the tokens.</p>\n\n<p>Returns:\n    responses.Response: HTTP response informing the user which keys were set using plain/text</p>\n", "signature": "() -> responses.Response", "funcdef": "def"}, {"fullname": "app.get_tokens", "modulename": "app", "qualname": "get_tokens", "type": "function", "doc": "<p>Returns the tokens currently stored in the .env file</p>\n\n<p>Returns:\n    responses.Response: HTTP request containing a JSON object with the TrustSECO-Spider's API tokens</p>\n", "signature": "() -> responses.Response", "funcdef": "def"}, {"fullname": "app.try_get_json_input", "modulename": "app", "qualname": "try_get_json_input", "type": "function", "doc": "<p>Tries to get the JSON input from the request.</p>\n\n<p>Returns:\n    Tuple[bool, responses.Response | dict]: A tuple containing a bool that denotes whether or not the JSON input was valid,\n    and either an HTTP response informing the user that something went wrong or the actual JSON input</p>\n", "signature": "() -> Tuple[bool, responses.Response | dict]", "funcdef": "def"}, {"fullname": "controller", "modulename": "controller", "type": "module", "doc": "<p>File containing the Controller of the TrustSECO-Spider</p>\n\n<p>This file contains the Controller class, which contains the logic used to run the spider.\nIt also contains some static methods that an outside program/end-user can use to get data from the TrustSECO-Spider.</p>\n\n<pre><code>Typical usage:\n\nfoo = get_data('input_json')\n</code></pre>\n"}, {"fullname": "controller.Controller", "modulename": "controller", "qualname": "Controller", "type": "class", "doc": "<p>Class methods for controlling the TrustSECO-Spider</p>\n\n<p>This class receives an JSON object as input, and will return an JSON object as output.\nThe output JSON object will contain the data as requested by the input JSON object.</p>\n\n<p>Attributes:\n    gh_api (GitHubAPICall): The GitHub API object\n    lib_api (LibrariesAPICall): The Libraries.IO API object\n    gh_spider (GitHubSpider): The GitHub spider object\n    cve_spider (CVESpider): The CVE spider object\n    so_spider (StackOverflowSpider): The StackOverflow spider object</p>\n"}, {"fullname": "controller.Controller.__init__", "modulename": "controller", "qualname": "Controller.__init__", "type": "function", "doc": "<p>Initializes the Controller object by setting the data-gathering objects.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "controller.Controller.run", "modulename": "controller", "qualname": "Controller.run", "type": "function", "doc": "<p>This is the main looping function of the program.</p>\n\n<p>It will try to read the console to see if a new command has been received.</p>\n\n<p>Parameters:\n    input_json (dict): The input JSON object</p>\n\n<pre><code>This input JSON object contains information about which package is to be spidered,\nand what data is to be returned.\n</code></pre>\n\n<p>Returns:\n    dict: The output JSON object</p>\n\n<pre><code>This output JSON object contains the data as requested by the input JSON object.\n</code></pre>\n", "signature": "(self, input_json: dict) -> dict", "funcdef": "def"}, {"fullname": "controller.Controller.get_github_data", "modulename": "controller", "qualname": "Controller.get_github_data", "type": "function", "doc": "<p>Get the data from GitHub.</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo_name (str): The name of the repository\n    release (str): The release name\n    wanted_data (List[str]): The list of data points to be returned</p>\n\n<p>Returns:\n    dict: The requested GitHub data</p>\n", "signature": "(\n    self,\n    owner: str,\n    repo_name: str,\n    release: str,\n    wanted_data: List[str]\n) -> dict", "funcdef": "def"}, {"fullname": "controller.Controller.get_libraries_data", "modulename": "controller", "qualname": "Controller.get_libraries_data", "type": "function", "doc": "<p>Get the data from Libraries.IO.</p>\n\n<p>Parameters:\n    platform (str): The platform of the repository\n    owner (str): The owner of the repository\n    repo_name (str): The name of the repository\n    release (str): The release name\n    wanted_data (List[str]): The list of data points to be returned</p>\n\n<p>Returns:\n    dict: The requested Libraries.IO data</p>\n", "signature": "(\n    self,\n    platform: str,\n    owner: str,\n    repo_name: str,\n    release: str,\n    wanted_data: List[str]\n) -> dict", "funcdef": "def"}, {"fullname": "controller.Controller.get_cve_data", "modulename": "controller", "qualname": "Controller.get_cve_data", "type": "function", "doc": "<p>Get the data from CVE website.</p>\n\n<p>Parameters:\n    repo_name (str): The name of the repository\n    wanted_data (List[str]): The list of data points to be returned</p>\n\n<p>Returns:\n    dict: The requested CVE data</p>\n", "signature": "(self, repo_name: str, wanted_data: List[str]) -> dict", "funcdef": "def"}, {"fullname": "controller.Controller.get_so_data", "modulename": "controller", "qualname": "Controller.get_so_data", "type": "function", "doc": "<p>Get the data from Stack Overflow.</p>\n\n<p>Parameters:\n    repo_name (str): The name of the repository\n    wanted_data (List[str]): The list of data points to be returned</p>\n\n<p>Returns:\n    dict: The requested Stack Overflow data</p>\n", "signature": "(self, repo_name: str, wanted_data: List[str]) -> dict", "funcdef": "def"}, {"fullname": "controller.Controller.get_virus_data", "modulename": "controller", "qualname": "Controller.get_virus_data", "type": "function", "doc": "<p>Get the virus data from the ClamAV container.</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo_name (str): The name of the repository\n    release (str): The release name\n    wanted_data (List[str]): The list of data points to be returned</p>\n\n<p>Returns:\n    dict: The requested virus data</p>\n", "signature": "(\n    self,\n    owner: str,\n    repo_name: str,\n    release: str,\n    wanted_data: List[str]\n) -> dict", "funcdef": "def"}, {"fullname": "controller.get_data", "modulename": "controller", "qualname": "get_data", "type": "function", "doc": "<p>This function will run the controller with the given JSON input</p>\n\n<p>Parameters:\n    input_json (dict): The received JSON input</p>\n\n<p>Returns:\n    dict: The requested data</p>\n", "signature": "(input_json: dict) -> dict", "funcdef": "def"}, {"fullname": "controller.update_token_gh", "modulename": "controller", "qualname": "update_token_gh", "type": "function", "doc": "<p>This function will update the environmental variables with the given GitHub token</p>\n\n<p>Parameters:\n    github_token (str): The user's GitHub token</p>\n", "signature": "(github_token: str) -> None", "funcdef": "def"}, {"fullname": "controller.update_token_lib", "modulename": "controller", "qualname": "update_token_lib", "type": "function", "doc": "<p>This function will update the environmental variable with the given Libraries.io token</p>\n\n<p>Parameters:\n    libraries_token (str): The user's Libraries.io token</p>\n", "signature": "(libraries_token: str) -> None", "funcdef": "def"}, {"fullname": "controller.get_tokens", "modulename": "controller", "qualname": "get_tokens", "type": "function", "doc": "<p>This functions read the environmental variables and returns the tokens currently contained within</p>\n\n<p>Returns:\n    dict: The current GitHub and Libraries.io tokens</p>\n", "signature": "() -> dict", "funcdef": "def"}, {"fullname": "demo", "modulename": "demo", "type": "module", "doc": "<p>Basic demo file, purely for demonstration purposes.</p>\n\n<p>Before running this file, the Flask application needs to be started. (instructions for which can be found in the README.md file)</p>\n"}, {"fullname": "demo.numpy_demo", "modulename": "demo", "qualname": "numpy_demo", "type": "function", "doc": "<p>Function containing the code for the numpy demo.</p>\n\n<p>Parameters:\n    scan_viruses (bool): Boolean denoting if we also want to scan for viruses</p>\n", "signature": "(wanted_data_points: dict) -> None", "funcdef": "def"}, {"fullname": "demo.afnetworking_demo", "modulename": "demo", "qualname": "afnetworking_demo", "type": "function", "doc": "<p>Function containing the code for the AFNetworking demo.</p>\n\n<p>Parameters:\n    scan_viruses (bool): Boolean denoting if we also want to scan for viruses</p>\n", "signature": "(wanted_data_points: dict) -> None", "funcdef": "def"}, {"fullname": "demo.virus_free_demo", "modulename": "demo", "qualname": "virus_free_demo", "type": "function", "doc": "<p>Function containing the code for the safe virus-scan demo.</p>\n", "signature": "() -> None", "funcdef": "def"}, {"fullname": "demo.virus_infected_demo", "modulename": "demo", "qualname": "virus_infected_demo", "type": "function", "doc": "<p>Function containing the code for the infected virus-scan demo.</p>\n", "signature": "() -> None", "funcdef": "def"}, {"fullname": "utils", "modulename": "utils", "type": "module", "doc": "<p></p>\n"}, {"fullname": "utils.api_calls", "modulename": "utils.api_calls", "type": "module", "doc": "<p>File containing all of the logic pertaining to making actual API calls</p>\n\n<p>This file handles all of the logic for actually making API calls.\nThis allows the program to be more modular and easier to maintain.</p>\n\n<pre><code>Typical usage:\n\nresponse = make_api_call(api_url, api_type)\n</code></pre>\n"}, {"fullname": "utils.api_calls.make_api_call", "modulename": "utils.api_calls", "qualname": "make_api_call", "type": "function", "doc": "<p>Perform a simple GET request, based off the given URL</p>\n\n<p>Parameters:\n    api_url (str): The URL to make the GET request to\n    api_type (str): The type of API to make the request to</p>\n\n<p>Returns:\n    response (requests.Response): The response from the GET request</p>\n", "signature": "(api_url: str, api_type: str) -> requests.models.Response", "funcdef": "def"}, {"fullname": "utils.api_calls.get_needed_headers", "modulename": "utils.api_calls", "qualname": "get_needed_headers", "type": "function", "doc": "<p>Gets the needed headers for the given API type</p>\n\n<p>Parameters:\n    api_type (str): The type of API to make the request to</p>\n\n<p>Returns:\n    headers (dict): The headers to use for the request</p>\n", "signature": "(api_type: str) -> dict", "funcdef": "def"}, {"fullname": "utils.api_calls.get_needed_params", "modulename": "utils.api_calls", "qualname": "get_needed_params", "type": "function", "doc": "<p>Gets the needed parameters for the given API type</p>\n\n<p>Parameters:\n    api_type (str): The type of API to make the request to</p>\n\n<p>Returns:\n    params (dict): The parameters to use for the request</p>\n", "signature": "(api_type: str) -> dict", "funcdef": "def"}, {"fullname": "utils.constants", "modulename": "utils.constants", "type": "module", "doc": "<p>Program wide constants</p>\n"}, {"fullname": "utils.constants.LIBRARIES_TOKEN", "modulename": "utils.constants", "qualname": "LIBRARIES_TOKEN", "type": "variable", "doc": "<p>GitHub Constants</p>\n", "default_value": " = 'LIBRARIES_TOKEN'"}, {"fullname": "utils.constants.RATE", "modulename": "utils.constants", "qualname": "RATE", "type": "variable", "doc": "<p>Authentication Constants</p>\n", "default_value": " = 'rate'"}, {"fullname": "utils.constants.ENVIRON_FILE", "modulename": "utils.constants", "qualname": "ENVIRON_FILE", "type": "variable", "doc": "<p>This program has been developed by students from the bachelor Computer Science at Utrecht University within the Software Project course.\n\u00a9 Copyright Utrecht University (Department of Information and Computing Sciences)</p>\n", "default_value": " = '.env'"}, {"fullname": "stackoverflow", "modulename": "stackoverflow", "type": "module", "doc": "<p></p>\n"}, {"fullname": "stackoverflow.stackoverflow_spider", "modulename": "stackoverflow.stackoverflow_spider", "type": "module", "doc": "<p>File containing the Stack Overflow spider</p>\n\n<p>This file contains the logic for the spider that will\nallow the program to use BeautifulSoup and Requests\nin order to scrape wanted data-points from the Stack Overflow website.</p>\n\n<pre><code>Typical usage:\n\nfoo = StackOverflowSpider()\nbar = foo.get_monthly_popularity('package')\n</code></pre>\n"}, {"fullname": "stackoverflow.stackoverflow_spider.StackOverflowSpider", "modulename": "stackoverflow.stackoverflow_spider", "qualname": "StackOverflowSpider", "type": "class", "doc": "<p>Class methods for getting data from Stack Overflow</p>\n\n<p>This class handles all of the spidering jobs for the Stack Overflow website.\nIt uses requests to get the webpage, and BeautifulSoup to parse and traverse it.</p>\n"}, {"fullname": "stackoverflow.stackoverflow_spider.StackOverflowSpider.__init__", "modulename": "stackoverflow.stackoverflow_spider", "qualname": "StackOverflowSpider.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "stackoverflow.stackoverflow_spider.StackOverflowSpider.get_monthly_popularity", "modulename": "stackoverflow.stackoverflow_spider", "qualname": "StackOverflowSpider.get_monthly_popularity", "type": "function", "doc": "<p>Get the monthly popularity of the given package.</p>\n\n<p>Parameters:\n    package (str): The name of the package</p>\n\n<p>Returns:\n    Tuple: The monthly popularity of the given package</p>\n\n<pre><code>This popularity is the percentage of questions posted that were about the given package.\n</code></pre>\n", "signature": "(self, package: str) -> dict", "funcdef": "def"}, {"fullname": "libraries_io", "modulename": "libraries_io", "type": "module", "doc": "<p></p>\n"}, {"fullname": "libraries_io.libraries_io_api_calls", "modulename": "libraries_io.libraries_io_api_calls", "type": "module", "doc": "<p>File containing the Libraries.io API class.</p>\n\n<p>This file contains all of the logic pertaining to making actual API calls to Libraries.io.</p>\n\n<pre><code>Typical usage:\n\nfoo = LibrariesIO()\nbar = libraries_io.get_release_frequency('platform', 'name')\n</code></pre>\n"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall", "type": "class", "doc": "<p>Class methods for getting data from Libraries.io</p>\n\n<p>This class contains all of the logic for getting data from Libraries.io.\nAPI calls are made to the Libraries.io API and the data is returned.\nIf needed, it performs calculations to get the data.</p>\n"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.__init__", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_release_frequency", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_release_frequency", "type": "function", "doc": "<p>Gets the average time per release</p>\n\n<p>Parameters:\n    platform (str): The platform of the project\n    name (str): The name of the project</p>\n\n<p>Returns:\n    int: The average time per release</p>\n", "signature": "(self, platform: str, name: str) -> int", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_contributors_count", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_contributors_count", "type": "function", "doc": "<p>Get the project's repository contributor count</p>\n\n<p>Parameters:\n    owner (str): The owner of the project\n    name (str): The name of the project</p>\n\n<p>Returns:\n    int: The project's repository contributor count</p>\n", "signature": "(self, owner: str, name: str) -> int", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_dependency_count", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_dependency_count", "type": "function", "doc": "<p>Get the project's dependency count</p>\n\n<p>Parameters:\n    platform (str): The platform of the project\n    name (str): The name of the project\n    release (str): The release name</p>\n\n<p>Returns:\n    int: The project's dependency count</p>\n", "signature": "(self, platform: str, name: str, release: str) -> int", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_dependent_count", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_dependent_count", "type": "function", "doc": "<p>Get the amount of dependents the project has</p>\n\n<p>Parameters:\n    platform (str): The platform of the project\n    name (str): The name of the project</p>\n\n<p>Returns:\n    int: The amount of dependents the project has</p>\n", "signature": "(self, platform: str, name: str) -> int", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_latest_release_date", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_latest_release_date", "type": "function", "doc": "<p>Get the time of the project's latest release</p>\n\n<p>Parameters:\n    platform (str): The platform of the project\n    name (str): The name of the project</p>\n\n<p>Returns:\n    str: The time of the project's latest release (in the format YYYY-MM-DDTHH:MM:SS, using the UTC timezone)</p>\n", "signature": "(self, platform: str, name: str) -> str", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_first_release_date", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_first_release_date", "type": "function", "doc": "<p>Get the time of the project's latest release</p>\n\n<p>Parameters:\n    platform (str): The platform of the project\n    name (str): The name of the project</p>\n\n<p>Returns:\n    str: The time of the project's latest release (in the format YYYY-MM-DDTHH:MM:SS, using the UTC timezone)</p>\n", "signature": "(self, platform: str, name: str) -> str", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_release_count", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_release_count", "type": "function", "doc": "<p>Get the amount of releases the project has</p>\n\n<p>Parameters:\n    platform (str): The platform of the project\n    name (str): The name of the project</p>\n\n<p>Returns:\n    int: The amount of releases the project has</p>\n", "signature": "(self, platform: str, name: str) -> int", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_sourcerank", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_sourcerank", "type": "function", "doc": "<p>Get the project's source rank</p>\n\n<p>Parameters:\n    platform (str): The platform of the project\n    name (str): The name of the project</p>\n\n<p>Returns:\n    int: The project's source rank</p>\n", "signature": "(self, platform: str, name: str) -> int", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_project_repository", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_project_repository", "type": "function", "doc": "<p>Get the project's repository information from Libraries.io</p>\n\n<p>Parameters:\n    owner (str): The owner of the project\n    name (str): The name of the project</p>\n\n<p>Returns:\n    dict: The project repository's information</p>\n", "signature": "(self, owner: str, name: str) -> dict", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_project_dependencies", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_project_dependencies", "type": "function", "doc": "<p>Get the project's dependencies from Libraries.io</p>\n\n<p>Parameters:\n    platform (str): The platform of the project\n    name (str): The name of the project\n    release (str): The release name</p>\n\n<p>Returns:\n    dict: The project's dependencies</p>\n", "signature": "(self, platform: str, name: str, release: str) -> dict", "funcdef": "def"}, {"fullname": "libraries_io.libraries_io_api_calls.LibrariesAPICall.get_project_information", "modulename": "libraries_io.libraries_io_api_calls", "qualname": "LibrariesAPICall.get_project_information", "type": "function", "doc": "<p>Get the project information from Libraries.io</p>\n\n<p>Parameters:\n    platform (str): The platform of the project\n    name (str): The name of the project</p>\n\n<p>Returns:\n    dict: The project's information</p>\n", "signature": "(self, platform: str, name: str) -> dict", "funcdef": "def"}, {"fullname": "github", "modulename": "github", "type": "module", "doc": "<p></p>\n"}, {"fullname": "github.github_api_calls", "modulename": "github.github_api_calls", "type": "module", "doc": "<p>File for executing api calls to github</p>\n\n<p>This file contains all of the logic pertaining to making actual API calls to github.</p>\n\n<pre><code>Typical usage:\n\nfoo = GithubAPICall()\nbar = foo.get_repository_data('owner', 'name')\n</code></pre>\n"}, {"fullname": "github.github_api_calls.GitHubAPICall", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall", "type": "class", "doc": "<p>Class methods for getting data from GitHub</p>\n\n<p>This class handles all of the GitHub data-point requests.\nAPI calls are made to the GitHub API and the data is returned.\nIf needed, it performs calculations to get the data.</p>\n\n<p>Attributes:\n    core_remaining (int): The number of remaining API calls for the core API\n    search_remaining (int): The number of remaining API calls for the search API</p>\n"}, {"fullname": "github.github_api_calls.GitHubAPICall.__init__", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.__init__", "type": "function", "doc": "<p>Initializes the GitHubAPICall class, setting the remaining API call limits</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_basic_repository_data", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_basic_repository_data", "type": "function", "doc": "<p>Get the basic information about the given repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name</p>\n\n<p>Returns:\n    dict: The basic repository data</p>\n", "signature": "(self, owner: str, repo: str) -> dict", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_repository_language", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_repository_language", "type": "function", "doc": "<p>Get the language of the given repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name</p>\n\n<p>Returns:\n    str: The language of the repository</p>\n", "signature": "(self, owner: str, repo: str) -> str", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_repository_stargazer_count", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_repository_stargazer_count", "type": "function", "doc": "<p>Get the stargazer count of the given repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name</p>\n\n<p>Returns:\n    int: The stargazer count</p>\n", "signature": "(self, owner: str, repo: str) -> int", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_release_data", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_release_data", "type": "function", "doc": "<p>Get information about a specific release/release of a repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name\n    release (str): The release name</p>\n\n<p>Returns:\n    dict: The release data</p>\n", "signature": "(self, owner: str, repo: str, release: str) -> dict", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_owner_data", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_owner_data", "type": "function", "doc": "<p>Get the basic information about the repository owner</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository</p>\n\n<p>Returns:\n    dict: The owner data</p>\n", "signature": "(self, owner: str) -> dict", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_repository_contributor_count", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_repository_contributor_count", "type": "function", "doc": "<p>Get the amount of contributors of the given repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name</p>\n\n<p>Returns:\n    int: The amount of contributors</p>\n", "signature": "(self, owner: str, repo: str) -> int", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_gitstar_ranking", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_gitstar_ranking", "type": "function", "doc": "<p>Get the GitStar ranking of the given repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name</p>\n\n<p>Returns:\n    int: The GitStar ranking</p>\n", "signature": "(self, owner: str, repo: str) -> int", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_yearly_commit_count", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_yearly_commit_count", "type": "function", "doc": "<p>Get the amount of commits in the last year\nThis 'last year' is counted from the current date</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name</p>\n\n<p>Returns:\n    int: The amount of commits in the last year</p>\n", "signature": "(self, owner: str, repo: str) -> int", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_total_download_count", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_total_download_count", "type": "function", "doc": "<p>Get the total amount of downloads of this repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name</p>\n\n<p>Returns:\n    int: The total amount of downloads of this repository</p>\n", "signature": "(self, owner: str, repo: str) -> int", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_release_download_count", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_release_download_count", "type": "function", "doc": "<p>Get the total amount of downloads of a specific release</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name\n    release (str): The release name</p>\n\n<p>Returns:\n    int: The total amount of downloads of the given release</p>\n", "signature": "(self, owner: str, repo: str, release: str) -> int", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_zero_responses_issue_count", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_zero_responses_issue_count", "type": "function", "doc": "<p>Get the total amount of issues that have no responses</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name</p>\n\n<p>Returns:\n    int: The total amount of issues that have no responses</p>\n", "signature": "(self, owner: str, repo: str) -> int", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_average_issue_resolution_time", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_average_issue_resolution_time", "type": "function", "doc": "<p>Get the average resolution time of the last 200 issues</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name</p>\n\n<p>Returns:\n    int: The average resolution time of the last 200 issues (in seconds)</p>\n", "signature": "(self, owner: str, repo: str) -> int", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_issue_count_per_release", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_issue_count_per_release", "type": "function", "doc": "<p>Get the amount of issues that were posted between the given release and the release after it</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name\n    release (str): The release to get the issues for</p>\n\n<p>Returns:\n    int: The amount of issues that were posted between the release and the release after it</p>\n", "signature": "(self, owner: str, repo: str, release: str) -> int", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_release_dates", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_release_dates", "type": "function", "doc": "<p>Get the publish date of the given release and the release after it (if it exists)</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name\n    release (str): The release to get the publish dates for</p>\n\n<p>Returns:\n    tuple: The publish dates of the given release and the release after it (if it exists)</p>\n", "signature": "(self, owner: str, repo: str, release: str) -> tuple", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_owner_stargazer_count", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_owner_stargazer_count", "type": "function", "doc": "<p>Get the stargazer count of the given owner\nCan take a lot of API calls and time, as an owner can have a lot of repositories</p>\n\n<p>Parameters:\n    owner (str): The owner to get the stargazer count for</p>\n\n<p>Returns:\n    int: The stargazer count of the given owner</p>\n", "signature": "(self, owner: str) -> int", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.get_release_download_links", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.get_release_download_links", "type": "function", "doc": "<p>Gets the release data of the given repo, and extracts the download link from it</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository name\n    release (str): The release to get the release download link for</p>\n\n<p>Returns:\n    List[str]: The download link of the given release</p>\n", "signature": "(self, owner: str, repo: str, release: str) -> List[str]", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.try_perform_api_call", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.try_perform_api_call", "type": "function", "doc": "<p>Perform rate limit checks, and if those pass, perform an API call</p>\n\n<p>If successful, returns the response\nIf not, returns None</p>\n\n<p>Parameters:\n    api_url (str): The URL to perform the API call on\n    call_type (str): The type of API call to perform</p>\n\n<p>Returns:\n    requests.Response: The response from the API call</p>\n", "signature": "(self, api_url: str, call_type: str) -> requests.models.Response", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.check_rate_limit", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.check_rate_limit", "type": "function", "doc": "<p>Function to check if a rate limit has been reached</p>\n\n<p>Parameters:\n    call_type (str): The type of API call to perform</p>\n\n<p>Returns:\n    bool: Whether or not we can continue with the API call</p>\n", "signature": "(self, call_type: str) -> bool", "funcdef": "def"}, {"fullname": "github.github_api_calls.GitHubAPICall.update_rate_limit_data", "modulename": "github.github_api_calls", "qualname": "GitHubAPICall.update_rate_limit_data", "type": "function", "doc": "<p>Makes an API call in order to get (and update) the rate limit data</p>\n\n<p>Returns:\n    bool: Whether or not the rate limit data was updated successfully</p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "github.github_spider", "modulename": "github.github_spider", "type": "module", "doc": "<p>File containing the GitHub spider</p>\n\n<p>This file contains the logic for the spider that will\nallow the program to use BeautifulSoup and Requests\nin order to scrape wanted data-points from the GitHub website.</p>\n\n<pre><code>Typical usage:\n\nfoo = GitHubSpider()\nbar = foo.get_repository_user_count('owner', 'repo')\n</code></pre>\n"}, {"fullname": "github.github_spider.GitHubSpider", "modulename": "github.github_spider", "qualname": "GitHubSpider", "type": "class", "doc": "<p>Class methods for getting data from the GitHub website</p>\n\n<p>This class handles all of the spidering jobs for the GitHub website.\nIt uses requests to get the webpage, and BeautifulSoup to parse and traverse it.</p>\n"}, {"fullname": "github.github_spider.GitHubSpider.__init__", "modulename": "github.github_spider", "qualname": "GitHubSpider.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "github.github_spider.GitHubSpider.get_repository_user_count", "modulename": "github.github_spider", "qualname": "GitHubSpider.get_repository_user_count", "type": "function", "doc": "<p>Get the number of users of a given repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository</p>\n\n<p>Returns:\n    int: The number of users of the repository</p>\n", "signature": "(self, owner: str, repo: str) -> int", "funcdef": "def"}, {"fullname": "github.github_spider.GitHubSpider.get_repository_open_issue_count", "modulename": "github.github_spider", "qualname": "GitHubSpider.get_repository_open_issue_count", "type": "function", "doc": "<p>Get the amount of open issues of a given repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository</p>\n\n<p>Returns:\n    int: The number of open issues of the repository</p>\n", "signature": "(self, owner: str, repo: str) -> int", "funcdef": "def"}, {"fullname": "github.github_spider.GitHubSpider.get_repository_closed_issue_count", "modulename": "github.github_spider", "qualname": "GitHubSpider.get_repository_closed_issue_count", "type": "function", "doc": "<p>Get the amount of closed issues of a given repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository</p>\n\n<p>Returns:\n    int: The number of closed issues of the repository</p>\n", "signature": "(self, owner: str, repo: str) -> int", "funcdef": "def"}, {"fullname": "github.github_spider.GitHubSpider.get_repository_issue_ratio", "modulename": "github.github_spider", "qualname": "GitHubSpider.get_repository_issue_ratio", "type": "function", "doc": "<p>Get the issue ratio of a given repository</p>\n\n<p>Parameters:\n    owner (str): The owner of the repository\n    repo (str): The repository</p>\n\n<p>Returns:\n    float: The issue ratio of the repository</p>\n", "signature": "(self, owner: str, repo: str) -> float", "funcdef": "def"}, {"fullname": "cve", "modulename": "cve", "type": "module", "doc": "<p></p>\n"}, {"fullname": "cve.cve_spider", "modulename": "cve.cve_spider", "type": "module", "doc": "<p>File containing the CVE spider</p>\n\n<p>This file contains the logic for the spider that will\nallow the program to use BeautifulSoup and Requests\nin order to scrape wanted data-points from the CVE website.</p>\n\n<pre><code>Typical usage:\n\nfoo = CVESpider()\nbar = foo.get_cve_vulnerability_count('name')\n</code></pre>\n"}, {"fullname": "cve.cve_spider.CVESpider", "modulename": "cve.cve_spider", "qualname": "CVESpider", "type": "class", "doc": "<p>Class methods for getting data from the CVE website</p>\n\n<p>This class handles all of the spidering jobs for the CVE website.\nIt uses requests to get the webpage, and BeautifulSoup to parse and traverse it.</p>\n"}, {"fullname": "cve.cve_spider.CVESpider.__init__", "modulename": "cve.cve_spider", "qualname": "CVESpider.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "cve.cve_spider.CVESpider.get_cve_vulnerability_count", "modulename": "cve.cve_spider", "qualname": "CVESpider.get_cve_vulnerability_count", "type": "function", "doc": "<p>Gets the amount of known vulnerabilities of a given package</p>\n\n<p>Parameters:\n    name (str): The name of the package</p>\n\n<p>Returns:\n    int: The amount of known vulnerabilities of the given package</p>\n", "signature": "(self, name: str) -> int", "funcdef": "def"}, {"fullname": "cve.cve_spider.CVESpider.get_all_cve_data", "modulename": "cve.cve_spider", "qualname": "CVESpider.get_all_cve_data", "type": "function", "doc": "<p>Get all the available CVE data for a given package</p>\n\n<p>Parameters:\n    name (str): The name of the package</p>\n\n<p>Returns:\n    list: A list of all the CVE data for the given package</p>\n", "signature": "(self, name: str) -> list", "funcdef": "def"}, {"fullname": "cve.cve_spider.CVESpider.get_cve_codes", "modulename": "cve.cve_spider", "qualname": "CVESpider.get_cve_codes", "type": "function", "doc": "<p>Get all the CVE codes of vulnerabilities that affect the given package</p>\n\n<p>Parameters:\n    name (str): The name of the package</p>\n\n<p>Returns:\n    list: A list of CVE codes for vulnerabilities affecting the given package</p>\n", "signature": "(self, name: str) -> list", "funcdef": "def"}, {"fullname": "cve.cve_spider.CVESpider.extract_cve_data", "modulename": "cve.cve_spider", "qualname": "CVESpider.extract_cve_data", "type": "function", "doc": "<p>Extracts the data from a given CVE link</p>\n\n<p>Parameters:\n    cve_code (str): The CVE code of the vulnerability</p>\n\n<p>Returns:\n    dict: A dictionary containing the extracted data</p>\n\n<pre><code>The data we extract is:\n- CVE code\n- CVE score\n- Affected versions:\n    - Start version type\n    - Start version\n    - End version type\n    - End version\n</code></pre>\n", "signature": "(self, cve_code: str) -> dict", "funcdef": "def"}, {"fullname": "cve.cve_spider.CVESpider.get_and_parse_webpage", "modulename": "cve.cve_spider", "qualname": "CVESpider.get_and_parse_webpage", "type": "function", "doc": "<p>Gets a BeautifulSoup object of the webpage at the given URL</p>\n\n<p>Parameters:\n    url (str): The URL of the webpage</p>\n\n<p>Returns:\n    BeautifulSoup: A BeautifulSoup object of the webpage</p>\n", "signature": "(self, url: str) -> bs4.BeautifulSoup", "funcdef": "def"}, {"fullname": "clamav", "modulename": "clamav", "type": "module", "doc": "<p></p>\n"}, {"fullname": "clamav.clamav_scanner", "modulename": "clamav.clamav_scanner", "type": "module", "doc": "<p>File containing the communication between the TrustSECO-Spider and the ClamAV virus scanner.</p>\n\n<p>This file contains all the logic for\nscanning a list of urls (that point to files).\nThe scanning is done using ClamAV which\nis running in another Docker container.</p>\n\n<pre><code>Typical usage:\n\nfoo = ClamAVScanner()\nbar = foo.get_virus_ratio([url1, url2, url3])\n</code></pre>\n"}, {"fullname": "clamav.clamav_scanner.ClamAVScanner", "modulename": "clamav.clamav_scanner", "qualname": "ClamAVScanner", "type": "class", "doc": "<p>Class methods for scanning web links that direct to files for viruses.</p>\n"}, {"fullname": "clamav.clamav_scanner.ClamAVScanner.__init__", "modulename": "clamav.clamav_scanner", "qualname": "ClamAVScanner.__init__", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "clamav.clamav_scanner.ClamAVScanner.get_virus_ratio", "modulename": "clamav.clamav_scanner", "qualname": "ClamAVScanner.get_virus_ratio", "type": "function", "doc": "<p>Scans the given links' contents for viruses.</p>\n\n<p>Parameters:\n    links (list): List of web links to the files to scan.</p>\n\n<p>Returns:\n    float: Percentage of links that have been scanned for viruses.</p>\n", "signature": "(self, links: List[str]) -> float", "funcdef": "def"}, {"fullname": "clamav.clamav_scanner.ClamAVScanner.scan_link", "modulename": "clamav.clamav_scanner", "qualname": "ClamAVScanner.scan_link", "type": "function", "doc": "<p>Scans the given link's contents for viruses.</p>\n\n<p>Parameters:\n    link (str): Web link to the file to scan.</p>\n\n<p>Returns:\n    bool: True if a virus has been detected, False otherwise.</p>\n", "signature": "(self, link: str) -> bool", "funcdef": "def"}, {"fullname": "clamav.clamav_scanner.ClamAVScanner.check_socket_availability", "modulename": "clamav.clamav_scanner", "qualname": "ClamAVScanner.check_socket_availability", "type": "function", "doc": "<p>Checks whether or not the socket file exists, and is accepting connections.</p>\n\n<p>Returns:\n    bool: Whether or not the socket exists and is listening</p>\n", "signature": "(self) -> bool", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();